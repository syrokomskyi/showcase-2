---
import { BCMSImage } from "@thebcms/components-react";
import type {
  ArticleEntry,
  ArticleEntryMetaItem,
  ProfileEntryMetaItem,
} from "../../../../../../bcms/types/ts";
import { bcmsPublic } from "../../../../../bcms-public";
import ArticleRenderer from "../../../../../components/ArticleRenderer.astro";
import ArticlesCard from "../../../../../components/Card";
import Layout from "../../../../../layouts/Layout.astro";
import {
  articleToLight,
  markdownToStructures,
  removeTitle,
} from "../../../../../utils/article";
import {
  getCountryCode,
  getEntrySlugMeta,
  getLanguageCode,
  getSupportedCountries,
  getSupportedLanguages,
} from "../../../../../utils/localization";

export async function getStaticPaths() {
  const countries = getSupportedCountries();
  const languages = getSupportedLanguages();

  const articles = (await bcmsPublic.entry.getAll("article")) as ArticleEntry[];

  const paths = [];
  for (const country of countries) {
    for (const language of languages) {
      const languageCode = getLanguageCode(language);

      for (const article of articles) {
        const slug =
          article.meta[languageCode as keyof typeof article.meta]?.slug ||
          article.meta.en?.slug ||
          "";
        if (slug) {
          paths.push({
            params: {
              country,
              language,
              slug,
            },
          });
        }
      }
    }
  }

  return paths;
}

const { language, slug } = Astro.params;

const languageCode = getLanguageCode(language);

const profile = await getEntrySlugMeta<ProfileEntryMetaItem>(
  bcmsPublic,
  languageCode,
  "profile"
);

const title = profile.title;

// TODO Replace by analogy with getEntrySlugMeta().
const articleEntries = (await bcmsPublic.entry.getAll(
  "article"
)) as ArticleEntry[];
const articleEntry = articleEntries.find((e) => {
  const entrySlug =
    e.meta[languageCode as keyof typeof e.meta]?.slug ?? e.meta.en?.slug;
  return entrySlug === slug;
});
const articleEntryMeta =
  (articleEntry?.meta[
    languageCode as keyof typeof articleEntry.meta
  ] as ArticleEntryMetaItem) ?? (articleEntry?.meta.en as ArticleEntryMetaItem);

const articleText = removeTitle(
  articleEntryMeta.text ?? "",
  articleEntryMeta.title ?? "UNDEFINED"
);

const articleStructures = markdownToStructures(articleText);

const clientConfig = bcmsPublic.getConfig();
---

<Layout
  title={`${articleEntryMeta.seo?.title ?? articleEntryMeta.title} - ${title}`}
>
  <!-- Article Page Container with Enhanced Spacing -->
  <div class="min-h-screen bg-gradient-to-b from-gray-50 to-white article-page">
    <!-- Main Article Content -->
    <div class="py-12 md:py-20 lg:py-24">
      <div class="container">
        <!-- Cover Image Section -->
        {
          articleEntryMeta.cover_image && (
            <div class="cover-image-spacing group">
              <div class="aspect-[16/9] rounded-3xl w-full overflow-hidden shadow-2xl">
                <BCMSImage
                  media={articleEntryMeta.cover_image}
                  clientConfig={clientConfig}
                  className="w-full h-full object-cover scale-106 group-hover:scale-100 transition-transform duration-[3000ms] ease-out"
                  client:load
                />
              </div>
            </div>
          )
        }

        <!-- Article Header -->
        <header class="text-center mb-12 md:mb-16 lg:mb-20">
          <h1
            class="text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold leading-tight tracking-tight text-gray-900 mb-6 max-w-4xl mx-auto"
          >
            {articleEntryMeta.title}
          </h1>
        </header>

        <!-- Article Content -->
        <article class="mb-16 md:mb-20 lg:mb-24">
          <div class="max-w-4xl mx-auto">
            <div
              class="modern-article-content bg-white rounded-2xl shadow-lg p-10 md:p-16 lg:p-20 xl:p-24"
            >
              <ArticleRenderer structures={articleStructures} />
            </div>
          </div>
        </article>
      </div>
    </div>
  </div>
</Layout>
