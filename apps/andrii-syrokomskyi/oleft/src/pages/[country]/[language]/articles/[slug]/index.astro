---
import { BCMSImage } from "@thebcms/components-react";
import type {
  ArticleEntry,
  ArticleEntryMetaItem,
  HomePageEntryMetaItem,
  ProfileEntryMetaItem,
} from "../../../../../../bcms/types/ts";
import { bcmsPublic } from "../../../../../bcms-public";
import ArticlesCard from "../../../../../components/articles/Card";
// import { GoodsForArticle } from "../../../../../components/articles/GoodsForArticle";
import Layout from "../../../../../layouts/Layout.astro";
import {
  articleToLight,
  markdownToHtml,
  removeTitle,
} from "../../../../../utils/article";
import {
  getCountryCode,
  getEntrySlugMeta,
  getLanguageCode,
  getSupportedCountries,
  getSupportedLanguages,
} from "../../../../../utils/localization";

export async function getStaticPaths() {
  const countries = getSupportedCountries();
  const languages = getSupportedLanguages();

  const articles = (await bcmsPublic.entry.getAll("article")) as ArticleEntry[];

  const paths = [];
  for (const country of countries) {
    for (const language of languages) {
      const languageCode = getLanguageCode(language);

      for (const article of articles) {
        const slug =
          article.meta[languageCode as keyof typeof article.meta]?.slug ||
          article.meta.en?.slug ||
          "";
        if (slug) {
          paths.push({
            params: {
              country,
              language,
              slug,
            },
          });
        }
      }
    }
  }

  return paths;
}

const { country, language, slug } = Astro.params;

const countryCode = getCountryCode(country);
const languageCode = getLanguageCode(language);

const profile = await getEntrySlugMeta<ProfileEntryMetaItem>(
  bcmsPublic,
  languageCode,
  "profile",
);

const title = profile.title;

const homePage = await getEntrySlugMeta<HomePageEntryMetaItem>(
  bcmsPublic,
  languageCode,
  "home-page",
  "home",
);

// TODO Replace by analogy with getEntrySlugMeta().
const articleEntries = (await bcmsPublic.entry.getAll(
  "article",
)) as ArticleEntry[];
const articleEntry = articleEntries.find((e) => {
  const entrySlug =
    e.meta[languageCode as keyof typeof e.meta]?.slug ?? e.meta.en?.slug;
  return entrySlug === slug;
});
const articleEntryMeta =
  (articleEntry?.meta[
    languageCode as keyof typeof articleEntry.meta
  ] as ArticleEntryMetaItem) ?? (articleEntry?.meta.en as ArticleEntryMetaItem);
const lightArticles = articleEntries.map((e) => {
  return articleToLight(e, languageCode);
});

const articleText = removeTitle(
  articleEntryMeta.text ?? "",
  articleEntryMeta.title ?? "UNDEFINED",
);

const similarArticles =
  lightArticles.filter((e) => {
    const entryCategories =
      articleEntryMeta.category?.map((i) => i.meta.en?.title) ?? [];
    const categories = e.categories.map((i) => i) ?? [];
    for (let i = 0; i < categories.length; i++) {
      if (
        entryCategories.includes(categories[i]) &&
        articleEntryMeta.slug !== e.slug
      ) {
        return true;
      }
    }
    return false;
  }) ?? [];

const clientConfig = bcmsPublic.getConfig();
---

<Layout
  title={`${articleEntryMeta.seo?.title ?? articleEntryMeta.title} - ${title}`}
>
  <!-- Article Page Container with Enhanced Spacing -->
  <div class="min-h-screen bg-gradient-to-b from-gray-50 to-white article-page">

    <!-- Main Article Content -->
    <div class="py-12 md:py-20 lg:py-24">
      <div class="container">
        <!-- Cover Image Section -->
        {
          articleEntryMeta.cover_image && (
            <div class="mb-12 md:mb-16 lg:mb-20">
              <BCMSImage
                media={articleEntryMeta.cover_image}
                clientConfig={clientConfig}
                className="aspect-[16/9] rounded-3xl w-full overflow-hidden object-cover shadow-2xl"
                client:load
              />
            </div>
          )
        }

        <!-- Article Header -->
        <header class="text-center mb-12 md:mb-16 lg:mb-20">
          <h1 class="text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold leading-tight tracking-tight text-gray-900 mb-6 max-w-4xl mx-auto">
            {articleEntryMeta.title}
          </h1>
        </header>

        <!-- Article Content -->
        {
          articleText.length > 0 && (
            <article class="mb-16 md:mb-20 lg:mb-24">
              <div class="max-w-4xl mx-auto">
                <div class="modern-article-content bg-white rounded-2xl shadow-lg p-8 md:p-12 lg:p-16" set:html={await markdownToHtml(articleText)} />
              </div>
              
              <!-- Decorative Separator -->
              <div class="flex justify-center mt-16 mb-12">
                <div class="flex space-x-3">
                  <div class="w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-pulse"></div>
                  <div class="w-3 h-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full animate-pulse" style="animation-delay: 0.2s"></div>
                  <div class="w-3 h-3 bg-gradient-to-r from-pink-500 to-blue-500 rounded-full animate-pulse" style="animation-delay: 0.4s"></div>
                </div>
              </div>
            </article>
          )
        }

        <!-- Goods Section -->
        {
          articleEntryMeta.goods && articleEntryMeta.goods.length > 0 && (
            <section class="mb-16 md:mb-20 lg:mb-24">
              <div class="bg-white rounded-2xl shadow-lg p-8 md:p-12">
                <div class="flex flex-wrap gap-4 mb-8">
                  <div class="bg-gradient-to-r from-gray-100 to-gray-200 rounded-full px-6 py-3 text-sm font-semibold tracking-wide">
                    <span class="text-gray-700">
                      {articleEntryMeta.goods.length}
                      {articleEntryMeta.goods.length === 1
                        ? homePage.goods_singular_word
                        : homePage.goods_plural_word}
                    </span>
                  </div>
                </div>
                {/* TODO: Implement GoodsForArticle component */}
              </div>
            </section>
          )
        }

        <!-- Similar Articles Section -->
        {
          similarArticles.length > 0 && (
            <section class="mb-16 md:mb-20">
              <div class="text-center mb-12 md:mb-16">
                <h2 class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
                  Other articles you may like
                </h2>
                <p class="text-gray-600 text-lg max-w-2xl mx-auto mb-8">
                  Discover more insights and stories that might interest you
                </p>
                <a 
                  href={`/${country}/${language}/articles`}
                  class="inline-flex items-center space-x-2 text-blue-600 hover:text-blue-700 font-semibold transition-colors group"
                >
                  <span>Show all articles</span>
                  <svg class="w-5 h-5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
                  </svg>
                </a>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-12">
                {similarArticles.map((card) => (
                  <div class="transform hover:scale-105 transition-transform duration-300">
                    <ArticlesCard
                      card={card}
                      bcmsConfig={clientConfig}
                      country={countryCode}
                      language={languageCode}
                      showTitleLayer={true}
                    />
                  </div>
                ))}
              </div>
            </section>
          )
        }
      </div>
    </div>
  </div>
</Layout>
